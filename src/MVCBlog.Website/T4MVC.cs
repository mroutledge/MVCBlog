// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
#pragma warning disable 1591, 3008, 3009
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    public static MVCBlog.Website.Controllers.AboutController About = new MVCBlog.Website.Controllers.T4MVC_AboutController();
    public static MVCBlog.Website.Controllers.AdministrationController Administration = new MVCBlog.Website.Controllers.T4MVC_AdministrationController();
    public static MVCBlog.Website.Controllers.BlogController Blog = new MVCBlog.Website.Controllers.T4MVC_BlogController();
    public static MVCBlog.Website.Controllers.ErrorController Error = new MVCBlog.Website.Controllers.T4MVC_ErrorController();
    public static MVCBlog.Website.Controllers.ImprintController Imprint = new MVCBlog.Website.Controllers.T4MVC_ImprintController();
    public static MVCBlog.Website.Controllers.LoginController Login = new MVCBlog.Website.Controllers.T4MVC_LoginController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string _references_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_references.min.js") ? Url("_references.min.js") : Url("_references.js");
        public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
        public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
        public static readonly string custom_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/custom.min.js") ? Url("custom.min.js") : Url("custom.js");
        public static readonly string customEditBlogEntry_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/customEditBlogEntry.min.js") ? Url("customEditBlogEntry.min.js") : Url("customEditBlogEntry.js");
        public static readonly string feedstatisticschart_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/feedstatisticschart.min.js") ? Url("feedstatisticschart.min.js") : Url("feedstatisticschart.js");
        public static readonly string jquery_2_1_0_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.0.intellisense.min.js") ? Url("jquery-2.1.0.intellisense.min.js") : Url("jquery-2.1.0.intellisense.js");
        public static readonly string jquery_2_1_1_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.1.intellisense.min.js") ? Url("jquery-2.1.1.intellisense.min.js") : Url("jquery-2.1.1.intellisense.js");
        public static readonly string jquery_2_1_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.1.min.js") ? Url("jquery-2.1.1.min.js") : Url("jquery-2.1.1.js");
        public static readonly string jquery_2_1_1_min_js = Url("jquery-2.1.1.min.js");
        public static readonly string jquery_2_1_1_min_map = Url("jquery-2.1.1.min.map");
        public static readonly string jquery_autocomplete_pack_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.autocomplete.pack.min.js") ? Url("jquery.autocomplete.pack.min.js") : Url("jquery.autocomplete.pack.js");
        public static readonly string jquery_lightbox_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.lightbox.min.js") ? Url("jquery.lightbox.min.js") : Url("jquery.lightbox.js");
        public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
        public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
        public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
        public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
        public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        public static readonly string popup_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/popup.min.js") ? Url("popup.min.js") : Url("popup.js");
        public static readonly string raphael_min_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/raphael-min.min.js") ? Url("raphael-min.min.js") : Url("raphael-min.js");
        public static readonly string raphael_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/raphael.min.js") ? Url("raphael.min.js") : Url("raphael.js");
        public static readonly string respond_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/respond.min.js") ? Url("respond.min.js") : Url("respond.js");
        public static readonly string respond_matchmedia_addListener_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/respond.matchmedia.addListener.min.js") ? Url("respond.matchmedia.addListener.min.js") : Url("respond.matchmedia.addListener.js");
        public static readonly string respond_matchmedia_addListener_min_js = Url("respond.matchmedia.addListener.min.js");
        public static readonly string respond_min_js = Url("respond.min.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class SyntaxHighlighter {
            private const string URLPATH = "~/Scripts/SyntaxHighlighter";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string shAutoloader_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shAutoloader.min.js") ? Url("shAutoloader.min.js") : Url("shAutoloader.js");
            public static readonly string shBrushAppleScript_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushAppleScript.min.js") ? Url("shBrushAppleScript.min.js") : Url("shBrushAppleScript.js");
            public static readonly string shBrushAS3_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushAS3.min.js") ? Url("shBrushAS3.min.js") : Url("shBrushAS3.js");
            public static readonly string shBrushBash_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushBash.min.js") ? Url("shBrushBash.min.js") : Url("shBrushBash.js");
            public static readonly string shBrushColdFusion_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushColdFusion.min.js") ? Url("shBrushColdFusion.min.js") : Url("shBrushColdFusion.js");
            public static readonly string shBrushCpp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushCpp.min.js") ? Url("shBrushCpp.min.js") : Url("shBrushCpp.js");
            public static readonly string shBrushCSharp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushCSharp.min.js") ? Url("shBrushCSharp.min.js") : Url("shBrushCSharp.js");
            public static readonly string shBrushCss_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushCss.min.js") ? Url("shBrushCss.min.js") : Url("shBrushCss.js");
            public static readonly string shBrushDelphi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushDelphi.min.js") ? Url("shBrushDelphi.min.js") : Url("shBrushDelphi.js");
            public static readonly string shBrushDiff_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushDiff.min.js") ? Url("shBrushDiff.min.js") : Url("shBrushDiff.js");
            public static readonly string shBrushErlang_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushErlang.min.js") ? Url("shBrushErlang.min.js") : Url("shBrushErlang.js");
            public static readonly string shBrushGroovy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushGroovy.min.js") ? Url("shBrushGroovy.min.js") : Url("shBrushGroovy.js");
            public static readonly string shBrushJava_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushJava.min.js") ? Url("shBrushJava.min.js") : Url("shBrushJava.js");
            public static readonly string shBrushJavaFX_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushJavaFX.min.js") ? Url("shBrushJavaFX.min.js") : Url("shBrushJavaFX.js");
            public static readonly string shBrushJScript_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushJScript.min.js") ? Url("shBrushJScript.min.js") : Url("shBrushJScript.js");
            public static readonly string shBrushPerl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushPerl.min.js") ? Url("shBrushPerl.min.js") : Url("shBrushPerl.js");
            public static readonly string shBrushPhp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushPhp.min.js") ? Url("shBrushPhp.min.js") : Url("shBrushPhp.js");
            public static readonly string shBrushPlain_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushPlain.min.js") ? Url("shBrushPlain.min.js") : Url("shBrushPlain.js");
            public static readonly string shBrushPowerShell_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushPowerShell.min.js") ? Url("shBrushPowerShell.min.js") : Url("shBrushPowerShell.js");
            public static readonly string shBrushPython_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushPython.min.js") ? Url("shBrushPython.min.js") : Url("shBrushPython.js");
            public static readonly string shBrushRuby_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushRuby.min.js") ? Url("shBrushRuby.min.js") : Url("shBrushRuby.js");
            public static readonly string shBrushSass_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushSass.min.js") ? Url("shBrushSass.min.js") : Url("shBrushSass.js");
            public static readonly string shBrushScala_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushScala.min.js") ? Url("shBrushScala.min.js") : Url("shBrushScala.js");
            public static readonly string shBrushSql_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushSql.min.js") ? Url("shBrushSql.min.js") : Url("shBrushSql.js");
            public static readonly string shBrushVb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushVb.min.js") ? Url("shBrushVb.min.js") : Url("shBrushVb.js");
            public static readonly string shBrushXml_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shBrushXml.min.js") ? Url("shBrushXml.min.js") : Url("shBrushXml.js");
            public static readonly string shCore_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shCore.min.js") ? Url("shCore.min.js") : Url("shCore.js");
            public static readonly string shLegacy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shLegacy.min.js") ? Url("shLegacy.min.js") : Url("shLegacy.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class tinymce {
            private const string URLPATH = "~/Scripts/tinymce";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class langs {
                private const string URLPATH = "~/Scripts/tinymce/langs";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string readme_md = Url("readme.md");
            }
        
            public static readonly string license_txt = Url("license.txt");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class plugins {
                private const string URLPATH = "~/Scripts/tinymce/plugins";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class advlist {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/advlist";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class anchor {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/anchor";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class autolink {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/autolink";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class autoresize {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/autoresize";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class autosave {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/autosave";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class bbcode {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/bbcode";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class charmap {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/charmap";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class code {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/code";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class colorpicker {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/colorpicker";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class compat3x {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/compat3x";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class css {
                        private const string URLPATH = "~/Scripts/tinymce/plugins/compat3x/css";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog.min.css") ? Url("dialog.min.css") : Url("dialog.css");
                             
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class img {
                        private const string URLPATH = "~/Scripts/tinymce/plugins/compat3x/img";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string buttons_png = Url("buttons.png");
                        public static readonly string icons_gif = Url("icons.gif");
                        public static readonly string items_gif = Url("items.gif");
                        public static readonly string menu_arrow_gif = Url("menu_arrow.gif");
                        public static readonly string menu_check_gif = Url("menu_check.gif");
                        public static readonly string progress_gif = Url("progress.gif");
                        public static readonly string tabs_gif = Url("tabs.gif");
                    }
                
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                    public static readonly string tiny_mce_popup_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tiny_mce_popup.min.js") ? Url("tiny_mce_popup.min.js") : Url("tiny_mce_popup.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class utils {
                        private const string URLPATH = "~/Scripts/tinymce/plugins/compat3x/utils";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string editable_selects_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editable_selects.min.js") ? Url("editable_selects.min.js") : Url("editable_selects.js");
                        public static readonly string form_utils_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/form_utils.min.js") ? Url("form_utils.min.js") : Url("form_utils.js");
                        public static readonly string mctabs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mctabs.min.js") ? Url("mctabs.min.js") : Url("mctabs.js");
                        public static readonly string validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/validate.min.js") ? Url("validate.min.js") : Url("validate.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class contextmenu {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/contextmenu";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class directionality {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/directionality";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class emoticons {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/emoticons";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class img {
                        private const string URLPATH = "~/Scripts/tinymce/plugins/emoticons/img";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string smiley_cool_gif = Url("smiley-cool.gif");
                        public static readonly string smiley_cry_gif = Url("smiley-cry.gif");
                        public static readonly string smiley_embarassed_gif = Url("smiley-embarassed.gif");
                        public static readonly string smiley_foot_in_mouth_gif = Url("smiley-foot-in-mouth.gif");
                        public static readonly string smiley_frown_gif = Url("smiley-frown.gif");
                        public static readonly string smiley_innocent_gif = Url("smiley-innocent.gif");
                        public static readonly string smiley_kiss_gif = Url("smiley-kiss.gif");
                        public static readonly string smiley_laughing_gif = Url("smiley-laughing.gif");
                        public static readonly string smiley_money_mouth_gif = Url("smiley-money-mouth.gif");
                        public static readonly string smiley_sealed_gif = Url("smiley-sealed.gif");
                        public static readonly string smiley_smile_gif = Url("smiley-smile.gif");
                        public static readonly string smiley_surprised_gif = Url("smiley-surprised.gif");
                        public static readonly string smiley_tongue_out_gif = Url("smiley-tongue-out.gif");
                        public static readonly string smiley_undecided_gif = Url("smiley-undecided.gif");
                        public static readonly string smiley_wink_gif = Url("smiley-wink.gif");
                        public static readonly string smiley_yell_gif = Url("smiley-yell.gif");
                    }
                
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class example {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/example";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string dialog_html = Url("dialog.html");
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class example_dependency {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/example_dependency";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class fullpage {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/fullpage";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class fullscreen {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/fullscreen";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class hr {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/hr";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class image {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/image";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class importcss {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/importcss";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class insertdatetime {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/insertdatetime";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class layer {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/layer";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class legacyoutput {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/legacyoutput";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class link {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/link";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class lists {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/lists";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class media {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/media";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string moxieplayer_swf = Url("moxieplayer.swf");
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class nonbreaking {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/nonbreaking";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class noneditable {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/noneditable";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class pagebreak {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/pagebreak";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class paste {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/paste";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class classes {
                        private const string URLPATH = "~/Scripts/tinymce/plugins/paste/classes";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string Clipboard_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Clipboard.min.js") ? Url("Clipboard.min.js") : Url("Clipboard.js");
                        public static readonly string Plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Plugin.min.js") ? Url("Plugin.min.js") : Url("Plugin.js");
                        public static readonly string Quirks_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Quirks.min.js") ? Url("Quirks.min.js") : Url("Quirks.js");
                        public static readonly string Utils_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Utils.min.js") ? Url("Utils.min.js") : Url("Utils.js");
                        public static readonly string WordFilter_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/WordFilter.min.js") ? Url("WordFilter.min.js") : Url("WordFilter.js");
                    }
                
                    public static readonly string plugin_dev_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.dev.min.js") ? Url("plugin.dev.min.js") : Url("plugin.dev.js");
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class preview {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/preview";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class print {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/print";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class save {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/save";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class searchreplace {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/searchreplace";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class spellchecker {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/spellchecker";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class classes {
                        private const string URLPATH = "~/Scripts/tinymce/plugins/spellchecker/classes";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string DomTextMatcher_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/DomTextMatcher.min.js") ? Url("DomTextMatcher.min.js") : Url("DomTextMatcher.js");
                        public static readonly string Plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Plugin.min.js") ? Url("Plugin.min.js") : Url("Plugin.js");
                    }
                
                    public static readonly string plugin_dev_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.dev.min.js") ? Url("plugin.dev.min.js") : Url("plugin.dev.js");
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class tabfocus {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/tabfocus";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class table {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/table";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class classes {
                        private const string URLPATH = "~/Scripts/tinymce/plugins/table/classes";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string CellSelection_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/CellSelection.min.js") ? Url("CellSelection.min.js") : Url("CellSelection.js");
                        public static readonly string Dialogs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Dialogs.min.js") ? Url("Dialogs.min.js") : Url("Dialogs.js");
                        public static readonly string Plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Plugin.min.js") ? Url("Plugin.min.js") : Url("Plugin.js");
                        public static readonly string Quirks_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Quirks.min.js") ? Url("Quirks.min.js") : Url("Quirks.js");
                        public static readonly string TableGrid_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/TableGrid.min.js") ? Url("TableGrid.min.js") : Url("TableGrid.js");
                    }
                
                    public static readonly string plugin_dev_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.dev.min.js") ? Url("plugin.dev.min.js") : Url("plugin.dev.js");
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class template {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/template";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class textcolor {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/textcolor";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class textpattern {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/textpattern";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class visualblocks {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/visualblocks";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class css {
                        private const string URLPATH = "~/Scripts/tinymce/plugins/visualblocks/css";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string visualblocks_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/visualblocks.min.css") ? Url("visualblocks.min.css") : Url("visualblocks.css");
                             
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class img {
                        private const string URLPATH = "~/Scripts/tinymce/plugins/visualblocks/img";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string address_gif = Url("address.gif");
                        public static readonly string article_gif = Url("article.gif");
                        public static readonly string aside_gif = Url("aside.gif");
                        public static readonly string blockquote_gif = Url("blockquote.gif");
                        public static readonly string div_gif = Url("div.gif");
                        public static readonly string dl_gif = Url("dl.gif");
                        public static readonly string figure_gif = Url("figure.gif");
                        public static readonly string h1_gif = Url("h1.gif");
                        public static readonly string h2_gif = Url("h2.gif");
                        public static readonly string h3_gif = Url("h3.gif");
                        public static readonly string h4_gif = Url("h4.gif");
                        public static readonly string h5_gif = Url("h5.gif");
                        public static readonly string h6_gif = Url("h6.gif");
                        public static readonly string hgroup_gif = Url("hgroup.gif");
                        public static readonly string ol_gif = Url("ol.gif");
                        public static readonly string p_gif = Url("p.gif");
                        public static readonly string pre_gif = Url("pre.gif");
                        public static readonly string section_gif = Url("section.gif");
                        public static readonly string ul_gif = Url("ul.gif");
                    }
                
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class visualchars {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/visualchars";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class wordcount {
                    private const string URLPATH = "~/Scripts/tinymce/plugins/wordcount";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string plugin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/plugin.min.js") ? Url("plugin.min.js") : Url("plugin.js");
                    public static readonly string plugin_min_js = Url("plugin.min.js");
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class skins {
                private const string URLPATH = "~/Scripts/tinymce/skins";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class lightgray {
                    private const string URLPATH = "~/Scripts/tinymce/skins/lightgray";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string Content_inline_min_css = Url("Content.inline.min.css");
                    public static readonly string Content_min_css = Url("Content.min.css");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class fonts {
                        private const string URLPATH = "~/Scripts/tinymce/skins/lightgray/fonts";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string readme_md = Url("readme.md");
                        public static readonly string tinymce_small_eot = Url("tinymce-small.eot");
                        public static readonly string tinymce_small_json = Url("tinymce-small.json");
                        public static readonly string tinymce_small_svg = Url("tinymce-small.svg");
                        public static readonly string tinymce_small_ttf = Url("tinymce-small.ttf");
                        public static readonly string tinymce_small_woff = Url("tinymce-small.woff");
                        public static readonly string tinymce_eot = Url("tinymce.eot");
                        public static readonly string tinymce_json = Url("tinymce.json");
                        public static readonly string tinymce_svg = Url("tinymce.svg");
                        public static readonly string tinymce_ttf = Url("tinymce.ttf");
                        public static readonly string tinymce_woff = Url("tinymce.woff");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class img {
                        private const string URLPATH = "~/Scripts/tinymce/skins/lightgray/img";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string anchor_gif = Url("anchor.gif");
                        public static readonly string loader_gif = Url("loader.gif");
                        public static readonly string object_gif = Url("object.gif");
                        public static readonly string trans_gif = Url("trans.gif");
                    }
                
                    public static readonly string skin_ie7_min_css = Url("skin.ie7.min.css");
                    public static readonly string skin_min_css = Url("skin.min.css");
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class themes {
                private const string URLPATH = "~/Scripts/tinymce/themes";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class modern {
                    private const string URLPATH = "~/Scripts/tinymce/themes/modern";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string theme_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/theme.min.js") ? Url("theme.min.js") : Url("theme.js");
                    public static readonly string theme_min_js = Url("theme.min.js");
                }
            
            }
        
            public static readonly string tinymce_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tinymce.min.js") ? Url("tinymce.min.js") : Url("tinymce.js");
            public static readonly string tinymce_min_js = Url("tinymce.min.js");
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string bootstrap_theme_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-theme.min.css") ? Url("bootstrap-theme.min.css") : Url("bootstrap-theme.css");
             
        public static readonly string bootstrap_theme_css_map = Url("bootstrap-theme.css.map");
        public static readonly string bootstrap_theme_min_css = Url("bootstrap-theme.min.css");
        public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
             
        public static readonly string bootstrap_css_map = Url("bootstrap.css.map");
        public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
        public static readonly string bootstrap_slate_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.slate.min.css") ? Url("bootstrap.slate.min.css") : Url("bootstrap.slate.css");
             
        public static readonly string bootstrap_slate_min_css = Url("bootstrap.slate.min.css");
        public static readonly string custom_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/custom.min.css") ? Url("custom.min.css") : Url("custom.css");
             
        public static readonly string jquery_autocomplete_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.autocomplete.min.css") ? Url("jquery.autocomplete.min.css") : Url("jquery.autocomplete.css");
             
        public static readonly string lightbox_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lightbox.min.css") ? Url("lightbox.min.css") : Url("lightbox.css");
             
        public static readonly string shCoreDefault_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/shCoreDefault.min.css") ? Url("shCoreDefault.min.css") : Url("shCoreDefault.css");
             
        public static readonly string Site_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Site.min.css") ? Url("Site.min.css") : Url("Site.css");
             
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class gx {
        private const string URLPATH = "~/gx";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string avatar_png = Url("avatar.png");
        public static readonly string chart_png = Url("chart.png");
        public static readonly string edit_png = Url("edit.png");
        public static readonly string image_png = Url("image.png");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class lightbox {
            private const string URLPATH = "~/gx/lightbox";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string blank_gif = Url("blank.gif");
            public static readonly string close_gif = Url("close.gif");
            public static readonly string closelabel_gif = Url("closelabel.gif");
            public static readonly string loading_gif = Url("loading.gif");
            public static readonly string next_gif = Url("next.gif");
            public static readonly string nextlabel_gif = Url("nextlabel.gif");
            public static readonly string prev_gif = Url("prev.gif");
            public static readonly string prevlabel_gif = Url("prevlabel.gif");
        }
    
        public static readonly string rss_png = Url("rss.png");
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591, 3008, 3009


